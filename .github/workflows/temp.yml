name: Temporary job to test all steps to install kind, vault & crossplane

on:
  workflow_dispatch:
  push:
    branches: [ test_flow ]
    paths-ignore:
      #- 'scripts/**' # Ignores bash scripts
      - '*.md'          # Ignores .md files at the root of the repository
      - '**/*.md'       # Ignores .md files within subdirectories

env:
  # Variable used disable the pv tool which is not working here as pseudo tty is not supported by action flow
  CONTEXT: "no-tty"

jobs:
  setup-primaza-k8s-platform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]
    env:
      PRIMAZA_GITHUB_REPO: ${{ github.event.pull_request.head.repo.full_name }}
      PRIMAZA_IMAGE_NAME: $KIND_REGISTRY/local/primaza-app
      PRIMAZA_URL: primaza.127.0.0.1.nip.io
      GITHUB_SHA_COMMIT: ${{ github.sha }}

      REGISTRY_NAME: kind-registry
      REGISTRY_PORT: 5000
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - name: Setup Kubernetes using kind and deploy a local container registry
        run: |
          curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/main/kind/kind.sh" | bash -s install
          
          # Adding registry to /etc/hosts
          echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

          # Exporting the registry location for subsequent jobs
          echo "KIND_REGISTRY=${REGISTRY_NAME}:${REGISTRY_PORT}" >> $GITHUB_ENV

      - name: Build primaza, generate image, Helm chart and push image
        run: |
          bash ./scripts/primaza.sh build
      - name: Deploy primaza helm chart
        run: |
          bash ./scripts/primaza.sh localdeploy
      #- name: Check pod, services, etc
      #  run: |
      #    kubectl get pods -A
      #    kubectl get svc -A
      #    kubectl get ingress -A
      #    echo "Curl primaza ...."
      #    curl -v http://$PRIMAZA_URL/clusters
      - name: Load the data such as cluster, services & credentials
        run: |
          bash ./scripts/primaza.sh loaddata
      - name: Installing Vault
        run: |
          bash ./scripts/vault.sh
      - name: Installing Crossplane
        run: |
          bash ./scripts/crossplane.sh
      - name: Installing Postgresql DB and Atomic fruits
        run: |
          bash ./scripts/atomic-fruits.sh
      - name: Creating the Primaza fruits Vault KV key
        run: |
          # Login as user bob and password sinclair
          bash ./scripts/vault.sh loginAsUser bob sinclair
          
          # Register the primaza KV entries
          kubectl exec vault-0 -n vault -- sh -c "vault kv put -mount=secret primaza/fruits username=healthy password=healthy database=fruits_database"
      - name: Bind application
        run: |
          bash ./scripts/primaza.sh bindApplication atomic-fruits fruits-claim
      - id: wait-for-atomic-fruits
        name: atomic-fruits should now be up and running
        run: |
          KUBERNETES_NAMESPACE=app
          # Ready means that the application is now binded with the service, so we're ok!
          kubectl wait --timeout=160s --for=condition=available deployment atomic-fruits -n $KUBERNETES_NAMESPACE

      - name: (Only if it failed) Log Primaza traces at failures
        if: failure()
        run: |
          PRIMAZA_KUBERNETES_NAMESPACE=primaza
          bash .github/print_primaza_logs.sh

      - name: (Only if it failed) Log Atomic Fruits traces at failures
        if: failure()
        run: |
          KUBERNETES_NAMESPACE=app
          echo "All pods in cluster"
          kubectl get pods -A
          echo "Deployment resource:"
          kubectl get deployment atomic-fruits -o yaml -n $KUBERNETES_NAMESPACE
          echo "Logs of the deployment:"
          kubectl logs deploy/atomic-fruits --all-containers=true -n $KUBERNETES_NAMESPACE
          echo "Print secret: "
          kubectl get secret atomic-fruits-secret -o yaml -n $KUBERNETES_NAMESPACE
          POD_NAME=$(kubectl get pod -l app.kubernetes.io/name=atomic-fruits -n $KUBERNETES_NAMESPACE -o name)
          echo "Describe pod:"
          kubectl describe $POD_NAME -n $KUBERNETES_NAMESPACE
          echo "Logs of running pod:"
          kubectl logs $POD_NAME -n $KUBERNETES_NAMESPACE
          echo "Logs of terminated pod:"
          kubectl logs -p $POD_NAME -n $KUBERNETES_NAMESPACE          
          
          
          
