name: Temporary job to test all steps to install kind, vault & crossplane

on:
  workflow_dispatch:
  push:
    branches: [ test_flow ]
    paths-ignore:
      #- 'scripts/**' # Ignores bash scripts
      - '*.md'          # Ignores .md files at the root of the repository
      - '**/*.md'       # Ignores .md files within subdirectories

env:
  # Variable used to disable the pv tool which is not working here as pseudo tty is not supported by GitHub steps
  CONTEXT: "no-tty"

jobs:
  setup-primaza-k8s-platform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - name: Setup Kubernetes using kind and deploy a local container registry
        env:
          REGISTRY_NAME: kind-registry
          REGISTRY_PORT: 5000
        run: |
          curl -s -L "https://raw.githubusercontent.com/snowdrop/k8s-infra/main/kind/kind.sh" | bash -s install
          
          # Adding registry name to the /etc/hosts file
          echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

          # Exporting the registry location for subsequent jobs
          echo "KIND_REGISTRY=${REGISTRY_NAME}:${REGISTRY_PORT}" >> $GITHUB_ENV

      - name: Build primaza, generate image, Helm chart and push image
        env:
          REGISTRY_GROUP: local

          PRIMAZA_GITHUB_REPO: ${{ github.event.pull_request.head.repo.full_name }}
          GITHUB_SHA_COMMIT: ${{ github.sha }}
          PRIMAZA_IMAGE_NAME: $KIND_REGISTRY/local/primaza-app
          PRIMAZA_NAMESPACE: primaza

          PRIMAZA_URL: primaza.127.0.0.1.nip.io
          # Variable needed by the helm chart to configure primaza vault client
          VAULT_URL: http://vault-internal.vault:8200
        run: |
          bash ./scripts/primaza.sh build

      - name: Deploy primaza helm chart
        env:
          PRIMAZA_URL: primaza.127.0.0.1.nip.io
          PRIMAZA_IMAGE_NAME: $KIND_REGISTRY/local/primaza-app
          PRIMAZA_NAMESPACE: primaza
        run: |
          bash ./scripts/primaza.sh localdeploy
          bash ./scripts/primaza.sh isAlive

      - name: Load the data such as cluster, services & credentials
        env:
          PRIMAZA_URL: primaza.127.0.0.1.nip.io
          PRIMAZA_NAMESPACE: primaza
        run: |
          bash ./scripts/primaza.sh loaddata

      - name: Installing Vault
        run: |
          bash ./scripts/vault.sh

      - name: Installing Crossplane
        run: |
          bash ./scripts/crossplane.sh

      - name: Installing Postgresql DB and Atomic fruits
        run: |
          bash ./scripts/atomic-fruits.sh

      - name: Creating the Primaza fruits Vault KV key
        run: |
          source ./scripts/common.sh
          
          # Login as user bob and password sinclair
          bash ./scripts/vault.sh loginAsUser bob sinclair
          
          # Register the primaza KV entries
          note "vault kv put -mount=secret primaza/fruits username=healthy password=healthy database=fruits_database"
          ./scripts/vault.sh vaultExec "vault kv put -mount=secret primaza/fruits username=healthy password=healthy database=fruits_database"

      - name: Wait until atomic-fruits is registered in Primaza
        env:
          PRIMAZA_URL: primaza.127.0.0.1.nip.io
        run: |
          source ./scripts/common.sh
          max_retries=5
          retry_delay=5
          retry_attempt=1
          
          function discover_atomic_fruits() {
            APPLICATION=$(curl -H 'Accept: application/json' -s $PRIMAZA_URL/applications/name/atomic-fruits")
            if [[ $(echo "$APPLICATION" | jq -r '.name') == "atomic-fruits" ]]; then
              return 0
            else
              return 1
            fi
          }
          
          while [ $retry_attempt -le $max_retries ]; do
            note "Attempt $retry_attempt of $max_retries"
            if discover_atomic_fruits; then
              note "Primaza discovered the atomic-fruits application: $APPLICATION"
              exit 0
            else
              warn "Primaza didn't yet discovered the atomic-fruits application: $APPLICATION."
              sleep $retry_delay
            fi
          done

      - name: Bind application
        env:
          PRIMAZA_URL: primaza.127.0.0.1.nip.io
          PRIMAZA_NAMESPACE: primaza
        run: |
          bash ./scripts/primaza.sh bindApplication atomic-fruits fruits-claim

      - id: wait-for-atomic-fruits
        name: atomic-fruits should now be up and running
        env:
          PRIMAZA_URL: primaza.127.0.0.1.nip.io
          PRIMAZA_NAMESPACE: primaza
        run: |
          # Ready means that the application is now binded with the service, so we're ok!
          kubectl wait --timeout=160s --for=condition=available deployment atomic-fruits -n $PRIMAZA_NAMESPACE
          
          CLAIM_STATUS=$(curl -s http://$PRIMAZA_URL/claims/name/fruits-claim | jq -r .status)
          if [[ "$CLAIM_STATUS" == "bound" ]]; then
            exit 0
          else
            error "Status of the claim: fruits-claim is: $CLAIM_STATUS" 
            exit 1
          fi

      - name: (Only if it failed) Log Primaza traces at failures
        if: failure()
        run: |
          bash ./scripts/primaza.sh log

      - name: (Only if it failed) Log Atomic Fruits traces at failures
        if: failure()
        run: |
          KUBERNETES_NAMESPACE=app
          echo "All pods in cluster"
          kubectl get pods -A
          echo "Deployment resource:"
          kubectl get deployment atomic-fruits -o yaml -n $KUBERNETES_NAMESPACE
          echo "Logs of the deployment:"
          kubectl logs deploy/atomic-fruits --all-containers=true -n $KUBERNETES_NAMESPACE
          echo "Print secret: "
          kubectl get secret atomic-fruits-secret -o yaml -n $KUBERNETES_NAMESPACE
          POD_NAME=$(kubectl get pod -l app.kubernetes.io/name=atomic-fruits -n $KUBERNETES_NAMESPACE -o name)
          echo "Describe pod:"
          kubectl describe $POD_NAME -n $KUBERNETES_NAMESPACE
          echo "Logs of running pod:"
          kubectl logs $POD_NAME -n $KUBERNETES_NAMESPACE
          echo "Logs of terminated pod:"
          kubectl logs -p $POD_NAME -n $KUBERNETES_NAMESPACE          
          
          
          
